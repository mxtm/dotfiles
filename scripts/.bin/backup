#!/bin/bash

# restic backup script
# By Maxwell R. T-M <max@mxtm.me>

# To use:
# Create a directory .backup_configuration
# Create two text files named targets and exclude in this directory.
# List on each line in targets a directory to be backed up
# List on each line in exclude a file / directory to be excluded from backup

readarray -t BACKUP_TARGETS < ~/.backup_configuration/targets 
readarray -t TO_EXCLUDE < ~/.backup_configuration/exclude

print_usage() {
	printf "Usage:\n"
	printf "backup -r             run backup using restic\n"
	printf "       -n directory   show, using ncdu, sizes of the files to be backed up\n"
	printf "       -s             show the total size of the files to be backed up\n"
	printf "       -m mountpoint  mount the repository on the specified mountpoint\n"
	printf "       -p n           remove snapshots and prune unneeded data, keeping n most recent snapshots\n"
	printf "       -l             list snapshots\n"
	printf "       -c             check repository integrity\n"
	printf "       -h             show this help message\n"
	printf "       -e             check for excludes that don't exist\n"
}

generate_arguments() {
	include_backup_targets=$1

	arguments=""

	for directory in "${TO_EXCLUDE[@]}"
	do
		arguments+=" --exclude=\"${directory}\""
	done

	if [ "$include_backup_targets" = true ]; then
		for directory in "${BACKUP_TARGETS[@]}"
		do
		arguments+=" \"${directory}\""
		done
	fi

	echo $arguments
}

run_backup() {
	eval "sudo -E restic backup `generate_arguments true`"
}

backup_ncdu() {
	eval "ncdu `generate_arguments false` $1"
}

backup_size() {
	eval "du -sh `generate_arguments true`"
}

mount_repository() {
	sudo -E restic mount $1
}

prune() {
	sudo -E restic --keep-last=$1 --prune
}

list() {
	sudo -E restic snapshots
}

check() {
	sudo -E restic check
}

check_excludes() {
	for directory in "${TO_EXCLUDE[@]}"
		do
			if ! [ -n "$(find "$directory" | head -1)" ]; then
				echo "$directory does not match any files."
			fi
		done
}

while getopts ':rn:sm:p:lceh' flag; do
	case $flag in
		r) run_backup ;;
		n) backup_ncdu $OPTARG ;;
		s) backup_size ;;
		m) mount_repository $OPTARG ;;
		p) prune $OPTARG ;;
		l) list ;;
		c) check ;;
		e) check_excludes ;;
		h) print_usage
			exit 0 ;;
	esac
done
